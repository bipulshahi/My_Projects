# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OLlXXX3m0Vk8XGu5K6RSq6Qjuzfh5R7T
"""

from numpy import array
from numpy import mean
from numpy import cov
from numpy.linalg import eig

# define a matrix
A = array([[6, 5], [2, 3], [1, 4]])
print(A)

from sklearn.decomposition import PCA
# create the PCA instance
pca = PCA(2)

# fit on data
pca.fit(A)

# access values and vectors
print(pca.components_)

print(pca.explained_variance_)

# transform data
B = pca.transform(A)
print(B)

# calculate the mean of each column
M = mean(A.T, axis=1)
print(M)

# center columns by subtracting column means
C = A - M
print(C)

# calculate covariance matrix of centered matrix
V = cov(C.T)
print(V)

# eigendecomposition of covariance matrix
values, vectors = eig(V)
print(vectors)

print(values)

# project data
P = vectors.T.dot(C.T)
print(P.T)

from sklearn.datasets import load_breast_cancer

df = load_breast_cancer()

print(df.keys())

X = df['data']
Y = df['target']

Y

print(df['target_names'])
print(df['feature_names'])
print(len(df['feature_names']))

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,Y)

from sklearn.decomposition import PCA
# create the PCA instance
pca = PCA(2)

pca.fit(xtrain)

pca.n_components_

xtr = pca.transform(xtrain)

pca.explained_variance_

pca.explained_variance_ratio_

from sklearn.neighbors import KNeighborsClassifier
kmodel = KNeighborsClassifier()

kmodel.fit(xtr,ytrain)

kmodel.score(xtr,ytrain)

from sklearn.linear_model import LogisticRegression
lmodel = LogisticRegression()
lmodel.fit(xtr,ytrain)

lmodel.score(xtr,ytrain)

import matplotlib.pyplot as plt
plt.scatter(xtr[:,0:1] , xtr[:,1:2] , c = ytrain)
plt.show()

xts = pca.transform(xtest)
import matplotlib.pyplot as plt
plt.scatter(xts[:,0:1] , xts[:,1:2] , c = ytest)
plt.show()

xts = pca.transform(xtest)
print(kmodel.score(xts,ytest))
print(lmodel.score(xts,ytest))

ypred_test = kmodel.predict(xts)
plt.scatter(xts[:,0:1] , xts[:,1:2] , c = ypred_test)
plt.show()

